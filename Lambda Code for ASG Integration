import boto3
import datetime
import os
import json

ec2 = boto3.client('ec2')
sns = boto3.client('sns')

def lambda_handler(event, context):
    print("Event: ", json.dumps(event))
    message = json.loads(event['Records'][0]['Sns']['Message'])
    lifecycle_transition = message['LifecycleTransition']
    instance_id = message['EC2InstanceId']
    
    if "launching" in lifecycle_transition:
        # Take snapshot of all attached volumes
        instance = ec2.describe_instances(InstanceIds=[instance_id])['Reservations'][0]['Instances'][0]
        snapshot_ids = []
        for volume in instance['BlockDeviceMappings']:
            vol_id = volume['Ebs']['VolumeId']
            description = f"ASG Backup - {vol_id} - {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            snapshot = ec2.create_snapshot(VolumeId=vol_id, Description=description)
            snapshot_ids.append(snapshot['SnapshotId'])
            print(f"Snapshot {snapshot['SnapshotId']} created for {vol_id}")
        
        # Send notification
        sns.publish(
            TopicArn=os.environ['SNS_TOPIC_ARN'],
            Subject='EBS Snapshot Backup Created',
            Message=f"Instance: {instance_id}\nSnapshots: {snapshot_ids}"
        )
    
    elif "terminating" in lifecycle_transition:
        # Optionally delete snapshots related to this instance
        pass

    return {'statusCode': 200, 'body': 'Lambda executed successfully'}
